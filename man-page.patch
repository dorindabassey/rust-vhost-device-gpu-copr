diff -ruN vhost-device-gpu/vhost-device-gpu.1 vhost-device-gpu/vhost-device-gpu.1
--- vhost-device-gpu/vhost-device-gpu.1	1970-01-01 01:00:00.000000000 +0100
+++ vhost-device-gpu/vhost-device-gpu.1	2025-03-10 09:49:56.876444734 +0200
@@ -0,0 +1,254 @@
+.\" Automatically generated by Pandoc 3.1.11.1
+.\"
+.TH "VHOST\-DEVICE\-GPU" "1" "" "Version 0.1.0" "rust\-vmm/vhost\-device"
+.SH NAME
+\f[B]vhost\-device\-gpu\f[R] \[em] vhost\-user backend for a VirtIO GPU
+device
+.SH SYNOPSIS
+.IP
+.EX
+vhost\-device\-gpu \-\-socket\-path <path> \-\-gpu\-mode <GPU_MODE>
+.EE
+.SH DESCRIPTION
+A virtio\-gpu device using the vhost\-user protocol.
+.SH OPTIONS
+.IP \[bu] 2
+\f[B]\f[CB]\-s, \-\-socket\-path <SOCKET>\f[B]\f[R]
+.PD 0
+.P
+.PD
+vhost\-user Unix domain socket.
+.IP \[bu] 2
+\f[B]\f[CB]\-g, \-\-gpu\-mode <GPU_MODE>\f[B]\f[R]
+.PD 0
+.P
+.PD
+The mode specifies which backend implementation to use.
+.RS 2
+.PP
+Possible values:
+.IP \[bu] 2
+\f[CR]virglrenderer\f[R]: OpenGL implementation, superseded by Virgl2.
+.IP \[bu] 2
+\f[CR]gfxstream\f[R]: Vulkan implementation (partial support only).
+.RE
+.IP \[bu] 2
+\f[B]\f[CB]\-c, \-\-capset <CAPSET>\f[B]\f[R]
+.PD 0
+.P
+.PD
+Comma\-separated list of enabled capsets.
+.RS 2
+.PP
+Possible values:
+.IP \[bu] 2
+\f[CR]virgl\f[R]: OpenGL implementation, superseded by Virgl2.
+.IP \[bu] 2
+\f[CR]virgl2\f[R]: OpenGL implementation.
+.IP \[bu] 2
+\f[CR]gfxstream\-vulkan\f[R]: Vulkan implementation (partial support
+only).
+.PD 0
+.P
+.PD
+\f[I]NOTE: Can only be used for 2D display output for now, no hardware
+acceleration yet.\f[R]
+.IP \[bu] 2
+\f[CR]gfxstream\-gles\f[R]: OpenGL ES implementation (partial support
+only).
+.PD 0
+.P
+.PD
+\f[I]NOTE: Can only be used for 2D display output for now, no hardware
+acceleration yet.\f[R]
+.RE
+.IP \[bu] 2
+\f[B]\f[CB]\-\-use\-egl <USE_EGL>\f[B]\f[R]
+.PD 0
+.P
+.PD
+Enable backend to use EGL.
+.PD 0
+.P
+.PD
+\f[I]Default: \f[CI]true\f[I]\f[R]
+.PD 0
+.P
+.PD
+\f[I]Possible values: \f[CI]true\f[I], \f[CI]false\f[I]\f[R]
+.IP \[bu] 2
+\f[B]\f[CB]\-\-use\-glx <USE_GLX>\f[B]\f[R]
+.PD 0
+.P
+.PD
+Enable backend to use GLX.
+.PD 0
+.P
+.PD
+\f[I]Default: \f[CI]false\f[I]\f[R]
+.PD 0
+.P
+.PD
+\f[I]Possible values: \f[CI]true\f[I], \f[CI]false\f[I]\f[R]
+.IP \[bu] 2
+\f[B]\f[CB]\-\-use\-gles <USE_GLES>\f[B]\f[R]
+.PD 0
+.P
+.PD
+Enable backend to use GLES.
+.PD 0
+.P
+.PD
+\f[I]Default: \f[CI]true\f[I]\f[R]
+.PD 0
+.P
+.PD
+\f[I]Possible values: \f[CI]true\f[I], \f[CI]false\f[I]\f[R]
+.IP \[bu] 2
+\f[B]\f[CB]\-\-use\-surfaceless <USE_SURFACELESS>\f[B]\f[R]
+.PD 0
+.P
+.PD
+Enable surfaceless backend option.
+.PD 0
+.P
+.PD
+\f[I]Default: \f[CI]true\f[I]\f[R]
+.PD 0
+.P
+.PD
+\f[I]Possible values: \f[CI]true\f[I], \f[CI]false\f[I]\f[R]
+.IP \[bu] 2
+\f[B]\f[CB]\-h, \-\-help\f[B]\f[R]
+.PD 0
+.P
+.PD
+Print help and usage information.
+.IP \[bu] 2
+\f[B]\f[CB]\-V, \-\-version\f[B]\f[R]
+.PD 0
+.P
+.PD
+Print version information.
+.SH LIMITATIONS
+.IP \[bu] 2
+This device links native libraries (due to the usage of Rutabaga)
+compiled with GNU libc.
+The CI is set up to not build this device for musl targets.
+.IP \[bu] 2
+It might be possible to build those libraries using musl and then build
+the GPU device, but this is untested.
+.IP \[bu] 2
+Currently, only sharing the display output to QEMU through a socket
+using the \f[CR]transfer_read\f[R] operation
+(\f[CR]VIRTIO_GPU_CMD_TRANSFER_FROM_HOST_3D\f[R]) is supported.
+.IP \[bu] 2
+Directly sharing display output resources using dmabuf is not yet
+supported.
+.IP \[bu] 2
+The following features are not yet supported:
+.RS 2
+.IP \[bu] 2
+\f[CR]VIRTIO_GPU_CMD_RESOURCE_CREATE_BLOB\f[R]
+.IP \[bu] 2
+\f[CR]VIRTIO_GPU_CMD_SET_SCANOUT_BLOB\f[R]
+.IP \[bu] 2
+\f[CR]VIRTIO_GPU_CMD_RESOURCE_ASSIGN_UUID\f[R]
+These require \c
+.UR https://github.com/rust-vmm/vhost/pull/251
+rust\-vmm/vhost#251
+.UE \c
+, which in turn requires QEMU API stabilization.
+.RE
+.IP \[bu] 2
+Because blob resources are not yet supported, some capsets are limited:
+.RS 2
+.IP \[bu] 2
+Venus (Vulkan implementation in virglrenderer) support is unavailable.
+.IP \[bu] 2
+\f[CR]gfxstream\-vulkan\f[R] and \f[CR]gfxstream\-gles\f[R] are exposed
+but can only be used for display output (no hardware acceleration yet).
+.RE
+.SH FEATURES
+The device leverages the \c
+.UR https://crates.io/crates/rutabaga_gfx
+\f[CR]rutabaga_gfx\f[R]
+.UE \c
+\ crate to provide rendering with virglrenderer and gfxstream.
+.IP \[bu] 2
+Gfxstream support is compiled by default but can be disabled by building
+without the \f[CR]gfxstream\f[R] feature flag:
+.RS 2
+.IP
+.EX
+cargo build \-\-no\-default\-features
+.EE
+.RE
+.IP \[bu] 2
+With Virglrenderer, Rutabaga translates OpenGL and Vulkan calls to an
+intermediate representation, allowing OpenGL acceleration on the host.
+.IP \[bu] 2
+With the gfxstream rendering mode, GLES and Vulkan calls are forwarded
+to the host with minimal modification.
+.SH EXAMPLES
+Start the daemon on the host machine using either GPU mode:
+.IP "1." 3
+\f[B]Virglrenderer\f[R]
+.IP "2." 3
+\f[B]Gfxstream\f[R] (if the crate has been compiled with the
+\f[CR]gfxstream\f[R] feature)
+.IP
+.EX
+host# vhost\-device\-gpu \-\-socket\-path /tmp/gpu.socket \-\-gpu\-mode virglrenderer
+.EE
+.PP
+With QEMU, two device frontends can be used:
+.IP "1." 3
+\f[B]\f[CB]vhost\-user\-gpu\-pci\f[B]\f[R]
+.IP "2." 3
+\f[B]\f[CB]vhost\-user\-vga\f[B]\f[R] (also implements VGA, allowing
+visibility of boot messages before GPU initialization)
+.PP
+By default, QEMU adds another VGA output.
+Disable it using \f[CR]\-vga none\f[R].
+.SS Using \f[CR]vhost\-user\-gpu\-pci\f[R]
+.IP
+.EX
+qemu\-system\-x86_64 \[rs]
+  \-chardev socket,id=vgpu,path=/tmp/gpu.socket \[rs]
+  \-device vhost\-user\-gpu\-pci,chardev=vgpu,id=vgpu \[rs]
+  \-object memory\-backend\-memfd,share=on,id=mem0,size=4G \[rs]
+  \-machine q35,memory\-backend=mem0,accel=kvm \[rs]
+  \-display gtk,gl=on,show\-cursor=on \[rs]
+  \-vga none
+.EE
+.SS Using \f[CR]vhost\-user\-vga\f[R]
+.IP
+.EX
+qemu\-system\-x86_64 \[rs]
+  \-chardev socket,id=vgpu,path=/tmp/gpu.socket \[rs]
+  \-device vhost\-user\-vga,chardev=vgpu,id=vgpu \[rs]
+  \-object memory\-backend\-memfd,share=on,id=mem0,size=4G \[rs]
+  \-machine q35,memory\-backend=mem0,accel=kvm \[rs]
+  \-display gtk,gl=on,show\-cursor=on \[rs]
+  \-vga none
+.EE
+.SH ENVIRONMENT
+.TP
+\f[B]RUST_LOG\f[R]
+Logging level.
+Set to \f[CR]debug\f[R] for maximum output.
+.SH BUGS
+See GitHub Issues: \c
+.UR https://github.com/rust-vmm/vhost-device/issues
+.UE \c
+.SH AUTHORS
+Dorinda Bassey \c
+.MT dbassey@redhat.com
+.ME \c
+.PP
+Matej Hrica \c
+.MT mhrica@redhat.com
+.ME \c
+.SH SEE ALSO
+\f[B]qemu(1)\f[R]
